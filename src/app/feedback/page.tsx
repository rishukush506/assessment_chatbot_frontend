"use client";

import { useState } from "react";
import { useSearchParams } from "next/navigation";
import { Suspense } from "react";

const chatbotQuestions = [
  "The chatbot’s personality was realistic and engaging",
  "The chatbot seemed too robotic",
  "The chatbot was welcoming during initial setup",
  "The chatbot seemed very unfriendly",
  "The chatbot explained its scope and purpose well",
  "The chatbot gave no indication as to its purpose",
  "The chatbot was easy to navigate",
  "It would be easy to get confused when using the chatbot",
  "The chatbot understood me well",
  "The chatbot failed to recognize a lot of my inputs",
  "Chatbot responses were useful, appropriate and informative",
  "Chatbot responses were irrelevant",
  "The chatbot coped well with any errors or mistakes",
  "The chatbot seemed unable to handle any errors",
  "The chatbot was very easy to use",
  "The chatbot was very complex",
];

const domainQuestions = [
  "I was able to understand the questions generated by the chatbot",
  "I was able to answer the questions easily",
  "I was able to understand the output generated by the chatbot",
  "The questions asked during the conversation made me think and reflect about my financial awareness",
  "The questions asked were relevant in terms of how I think and deal with matters of money",
  "I thought that the questions were relatable to my context of financial decisions",
  "The financial persona generated was accurate",
  "I agree with the list of strengths generated",
  "I agree to the points listed under 'opportunities to improve'",
  "Any other ideas or reflections from your experience? Please specify",
];

const options = [
  "Strongly Disagree",
  "Disagree",
  "Neutral",
  "Agree",
  "Strongly Agree",
];

export default function FeedbackForm() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <FeedbackFormWrapper />
    </Suspense>
  );
}

function FeedbackFormWrapper() {
  const [formData, setFormData] = useState<{ [key: string]: string }>({});
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [timestamp, setTimestamp] = useState("");

  const searchParams = useSearchParams();
  const userId = searchParams.get("user_id");
  const sessionId = searchParams.get("session_id");

  console.log("User ID:", userId);
  console.log("Session ID:", sessionId);

  const handleChange = (question: string, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [question]: value,
    }));
  };

  const istTimestamp = new Date().toLocaleString("en-IN", {
    timeZone: "Asia/Kolkata",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
  });

  // console.log("IST Timestamp:", istTimestamp);

  // Production changes
  const API_BASE = process.env.NEXT_PUBLIC_API_URL;
  //   const API_BASE=  "http://localhost:8000"

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log("Feedback Submitted:", formData);

    try {
      const res = await fetch(`${API_BASE}/feedback`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          responses: formData,
          user_id: userId,
          session_id: sessionId,
        }),
      });
      console.log("Response:", res);

      if (res.ok) {
        setTimestamp(istTimestamp);
        console.log("Timestamp set:", istTimestamp);
        setMessage(`✅ Feedback submitted successfully! User Id: "${userId}"`);
        setIsSubmitted(true);
        setFormData({});
      } else {
        setMessage("❌ Failed to submit feedback");
      }
    } catch (error) {
      console.error(error);
      setMessage("⚠️ Error while submitting feedback");
    } finally {
      setLoading(false);
    }

    // 🔹 You can send this to FastAPI with fetch/axios
  };

  const handleClear = () => {
    setFormData({});
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-900 text-gray-100 p-6">
      <div className="max-w-3xl w-full bg-gray-800 rounded-2xl shadow-lg p-8">
        <h1 className="text-2xl font-bold mb-6 text-center">Feedback Form</h1>
        <form onSubmit={handleSubmit} className="space-y-8">
          {/* Chatbot Usability Section */}
          <div>
            <h2 className="text-xl font-semibold mb-8">
              Chatbot Usability Questions
            </h2>
            {chatbotQuestions.map((q, idx) => (
              <div key={idx} className="mb-8">
                <p className="mb-2 font-medium">
                  {idx + 1}. {q}
                </p>
                <div className="flex space-x-6">
                  {options.map((opt) => (
                    <label key={opt} className="flex items-center space-x-2">
                      <input
                        type="radio"
                        name={q}
                        value={opt}
                        checked={formData[q] === opt}
                        onChange={() => handleChange(q, opt)}
                        className="form-radio text-blue-600"
                        // Production changes
                        required
                      />
                      <span>{opt}</span>
                    </label>
                  ))}
                </div>
              </div>
            ))}
          </div>

          {/* Domain Related Section */}
          <div>
            <h2 className="text-xl font-semibold mb-8">
              Domain Related Questions
            </h2>
            {domainQuestions.map((q, idx) => (
              <div key={idx} className="mb-8">
                <p className="mb-2 font-medium">
                  {chatbotQuestions.length + idx + 1}. {q}
                </p>
                {q.startsWith("Any other ideas") ? (
                  <textarea
                    className="w-full p-2 rounded-md bg-gray-800 border border-gray-600 text-white"
                    rows={3}
                    value={formData[q] || ""}
                    onChange={(e) => handleChange(q, e.target.value)}
                    placeholder="Write your response here..."
                  />
                ) : (
                  <div className="flex space-x-6">
                    {options.map((opt) => (
                      <label key={opt} className="flex items-center space-x-2">
                        <input
                          type="radio"
                          name={q}
                          value={opt}
                          checked={formData[q] === opt}
                          onChange={() => handleChange(q, opt)}
                          className="form-radio text-blue-600"
                          // Production changes
                          required
                        />
                        <span>{opt}</span>
                      </label>
                    ))}
                  </div>
                )}
              </div>
            ))}
          </div>

          {/* Submit Button */}
          <div className="flex justify-between mt-6">
            <button
              type="button"
              onClick={handleClear}
              className="px-6 py-2 bg-gray-500 hover:bg-gray-600 rounded-lg text-white font-semibold transition"
            >
              Clear Responses
            </button>

            {/* Right side Submit Button */}
            <button
              type="submit"
              className="px-6 py-2 bg-blue-700 hover:bg-blue-800 
                                rounded-lg text-white font-semibold transition
                                disabled:bg-gray-500 disabled:cursor-not-allowed disabled:opacity-70"
              disabled={isSubmitted}
            >
              {loading ? "Submitting..." : "Submit Feedback"}
            </button>
          </div>
        </form>
        {message && (
          <div>
            <p className="mt-4 text-center text-lg font-medium">
              {message} Submit Time: {timestamp}
            </p>
            <p className="mt-4 text-center text-lg font-medium">
              🎉 Thank You for Trying our Chatbot!!
            </p>
          </div>
        )}
      </div>
    </div>
  );
}
